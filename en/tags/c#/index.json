[{"content":"Параметри стилю clang-format Параметри стилю clang-format описують налаштовувані параметри стилю форматування, що підтримуються LibFormat та ClangFormat .\nВикористовуючи утиліту командного рядка clang-format або функції clang::format::reformat(...) з коду, можна або використовувати один із заздалегідь визначених стилів ( LLVM , Google , Chromium , Mozilla , WebKit , Microsoft ) або створити власний стиль шляхом налаштування конкретних параметрів стилю.\nНалаштування стилю clang-format clang-format підтримує два способи надання власних параметрів стилю: безпосередньо вкажіть конфігурацію стилю в опції командного рядка -style = або використовуйте файл -style = та додайте конфігурацію стилю у файл .clang-формату або _clang-формату у каталозі проекту.\nФайл .clang-format використовує синтакисис yaml :\nkey1:value1key2:value2# коментарПриклад файла конфігурації для кількох мов\n---# Ми використовуємо за замовчуванням LLVM стиль, але ...BasedOnStyle:LLVM# з відступом 4IndentWidth:4---# Для мови програмування C++Language:Cpp# Примусові вказівники на типDerivePointerAlignment:falsePointerAlignment:Left---# для JavaScriptLanguage:JavaScript# обмежуємо довжину рядка до 100 символівColumnLimit:100---# .proto файлиLanguage:Proto# автоматично форматувати не будемоDisableFormat:true---# Для C#Language:CSharp# використовуємо обмеження довжини рядкаColumnLimit:100...Вимкнення форматування для фрагменту коду Clang-format розуміє також спеціальні коментарі, які вимикають форматування на обраному форагменты коду. Код між коментарями // clang-format off або /* clang-format off */ та // clang-format on та /* clang-format on */ не буде форматуватися. Коментарі будуть відформатовані (вирівняні) у звичайному режимі.\nint formatted_code; // clang-format off  void unformatted_code ; // clang-format on void formatted_code_again; Конфігурація стилю у коді Настроювані параметри стилю формату У цьому розділі перелічені підтримувані параметри стилю. Тип значення вказаний для кожного варіанту. Для типів перерахування можливі значення вказуються як як елемент переліку C++ (з префіксом, наприклад LS_Auto ), так і як значення, яке можна використовувати в конфігурації (без префікса: Auto ).\nBasedOnStyle (string) Стиль, який використовується для всіх параметрів, не вказаних у конфігурації.\nЦей параметр підтримується лише у конфігурації формату clang (як у межах -style = '{...}' , так і у файлі .clang-format ).\nМожливі значення:\n LLVM cтиль, що відповідає LLVM coding standards Google cтиль, що відповідає Google’s C++ style guide Chromium cтиль, що відповідає Chromium’s style guide Mozilla cтиль, що відповідає Mozilla’s style guide WebKit cтиль, що відповідає WebKit’s style guide Microsoft cтиль, що відповідає Microsoft’s style guide GNU cтиль, що відповідає GNU coding standards  BasedOnStyle:GoogleAccessModifierOffset (int) Додатковий відступ або відступ модифікаторів доступу, напр. public: .\nAccessModifierOffset:2AlignAfterOpenBracket (BracketAlignmentStyle) Якщо true , горизонтально вирівнює аргументи після відкритої дужки.\nЦе стосується круглих дужок () , кутових дужок \u0026lt;\u0026gt; та квадратних дужок [] .\nМожливі значення:\n BAS_Align (у конфігурації: Align) Вирівняти параметри на відкритій дужці, наприклад:  void someLongFunction(argument1, argument2);  BAS_DontAlign (у конфігурації: DontAlign) Не вирівнювати, замість цього використовуйте ContinuationIndentWidth, наприклад:  void someLongFunction(argument1, argument2);  BAS_AlwaysBreak (у конфігурації: AlwaysBreak) Завжди розривати після відкритої дужки, якщо параметри не вміщуються в один рядок, наприклад:  void someLongFunction( argument1, argument2); AlignConsecutiveAssignments (bool) Якщо true , вирівнює послідовні призначення.\nЦе вирівняє оператори присвоєння послідовних рядків. Це призведе до форматування виду:\nint aaaa = 12; int b = 23; int ccc = 23; AlignConsecutiveBitFields (bool) Якщо true , вирівнює послідовних членів бітового поля.\nЦе вирівняє роздільники розрядних полів послідовних рядків. Це призведе до форматування виду:\nint aaaa : 1; int b : 12; int ccc : 8; AlignConsecutiveDeclarations (bool) Якщо true , вирівнює послідовні декларації.\nЦе вирівняє назви оголошень послідовних рядків. Це призведе до форматування виду:\nint aaaa = 12; float b = 23; std::string ccc = 23; AlignConsecutiveMacros (bool) Якщо значення true , вирівнює послідовні макроси препроцесора C/C++ .\nЦе вирівняє макроси препроцесора C/C++ послідовних рядків. Це призведе до форматування виду:\n#define SHORT_NAME 42 #define LONGER_NAME 0x007f #define EVEN_LONGER_NAME (2) #define foo(x) (x * x) #define bar(y, z) (y + z) AlignEscapedNewlines (EscapedNewlineAlignmentStyle) Варіанти вирівнювання зворотних скісних рисок у рядах, що відключаються.\nМожливі значення:\n ENAS_DontAlign (у конфігурації: DontAlign) Не вирівнювати екрановані нові рядки.  #define A \\ int aaaa; \\ int b; \\ int dddddddddd;  ENAS_Left (у конфігурації: Left) Вирівняти екрановані нові рядки якомога далі ліворуч.  true: #define A \\ int aaaa; \\ int b; \\ int dddddddddd;  false:  ENAS_Right (у конфігурації: Right) Вирівнювання екранованих рядків у крайньому правому стовпці.  #define A \\ int aaaa; \\ int b; \\ int dddddddddd; AlignOperands (OperandAlignmentStyle) Якщо true, горизонтально вирівняйте операнди бінарних та тернарних виразів.\nМожливі значення:\n  OAS_DontAlign (у конфігурації: DontAlign) Не вирівнювати операнди бінарних та тернарних виразів. Обернуті рядки мають відступи ContinuationIndentWidth пробіли від початку рядка.\n  OAS_Align (у конфігурації: Align) Горизонтально вирівнює операнди бінарних та тернарних виразів.\n  Зокрема, це вирівнює операнди одного виразу, який потрібно розділити на кілька рядків, наприклад:\nint aaa = bbbbbbbbbbbbbbb + ccccccccccccccc; Коли встановлено BreakBeforeBinaryOperators, обернутий оператор вирівнюється з операндом у першому рядку.\nint aaa = bbbbbbbbbbbbbbb + ccccccccccccccc;  OAS_AlignAfterOperator (у конфігурації: AlignAfterOperator) Горизонтально вирівнюйте операнди бінарних та тернарних виразів.  Це схоже на AO_Align, крім випадків, коли встановлено BreakBeforeBinaryOperators, оператор не має відступу, щоб загорнутий операнд вирівнювався з операндом у першому рядку.\nint aaa = bbbbbbbbbbbbbbb + ccccccccccccccc; AlignTrailingComments (bool) Якщо true, вирівнює кінцеві коментарі.\ntrue: int a; // My comment a int b = 2; // comment b  // vs  false: int a; // My comment a int b = 2; // comment about b AllowAllArgumentsOnNextLine (bool) Якщо виклик функції або списковий ініціалізатор не вміщується у рядок, дозволяє розміщувати всі аргументи в наступному рядку, навіть якщо BinPackArguments хибний.\ntrue: callFunction( a, b, c, d); false: callFunction(a, b, c, d); AllowAllConstructorInitializersOnNextLine (bool) Якщо визначення конструктора зі списком ініціалізатора-члена не вміщується в одному рядку, дозволяє розмістити всі члени-ініціалізатори в наступному рядку, якщо ConstructorInitializerAllOnOneLineOrOnePerLine має значення true. Зауважте, що цей параметр не впливає, якщо значення ConstructorInitializerAllOnOneLineOrOnePerLine встановлено false.\ntrue: MyClass::MyClass() : member0(0), member1(2) {} false: MyClass::MyClass() : member0(0), member1(2) {} AllowAllParametersOfDeclarationOnNextLine (bool) Якщо оголошення функції не вміщується в рядку, дозволяє помістити всі параметри оголошення функції в наступний рядок, навіть якщо BinPackParameters встановлено false.\ntrue: void myFunction( int a, int b, int c, int d, int e); false: void myFunction(int a, int b, int c, int d, int e); AllowShortBlocksOnASingleLine (ShortBlockStyle) Залежно від значення, while (true) { continue; } можна поставити в один рядок.\nМожливі значення:\n SBS_Never (у конфігурації: Never) Ніколи не об’єднуйте блоки в один рядок.  while (true) { } while (true) { continue; }  SBS_Empty (у конфігурації: Empty) Об’єднувати лише порожні блоки.  while (true) {} while (true) { continue; }  SBS_Always (у конфігурації: Always) Завжди об’єднуйте короткі блоки в один рядок.  while (true) {} while (true) { continue; } AllowShortCaseLabelsOnASingleLine (bool) Якщо true, короткі мітки будуть стискатися в один рядок.\ntrue: switch (a) { case 1: x = 1; break; case 2: return; } // vs.  false: switch (a) { case 1: x = 1; break; case 2: return; } AllowShortEnumsOnASingleLine (bool) Дозволити короткі переліки в одному рядку.\ntrue: enum { A, B } myEnum; false: enum { A, B } myEnum; AllowShortFunctionsOnASingleLine (ShortFunctionStyle) Залежно від значення, int f () {return 0; } можна поставити в один рядок.\nМожливі значення:\n  SFS_None (у конфігурації: None) Ніколи не об’єднуйте функції в один рядок.\n  SFS_InlineOnly (у конфігурації: InlineOnly) Лише функції злиття, визначені всередині класу. Те саме, що і \u0026ldquo;вбудований\u0026rdquo;, за винятком того, що це не означає \u0026ldquo;порожній\u0026rdquo;: тобто порожні функції верхнього рівня також не об'єднуються.\n  class Foo { void f() { foo(); } }; void f() { foo(); } void f() { }  SFS_Empty (у конфігурації: Empty) Об'єднати лише порожні функції.  void f() {} void f2() { bar2(); }  SFS_Inline (у конфігурації: Inline) Лише функції злиття, визначені всередині класу. Мається на увазі \u0026ldquo;порожній\u0026rdquo;.  class Foo { void f() { foo(); } }; void f() { foo(); } void f() {}  SFS_All (у конфігурації: All) Об’єднати всі функції, що розміщуються в одному рядку.  class Foo { void f() { foo(); } }; void f() { bar(); } AllowShortIfStatementsOnASingleLine (ShortIfStyle) Якщо true, if (a) return; можна поставити в один рядок.\nМожливі значення:\n SIS_Never (у конфігурації: Never) Ніколи не ставте короткі if'и на одному рядку.  if (a) return ; else { return; }  SIS_WithoutElse (у конфігурації: WithoutElse) Без інакшого ставити короткі if'и в тому ж рядку, лише якщо else не є складеним оператором.  if (a) return; else return;  SIS_Always (у конфігурації: Always) Завжди ставіть короткі if'и в одному рядку, якщо else не є складеним твердженням чи ні.  if (a) return; else { return; } AllowShortLambdasOnASingleLine (ShortLambdaStyle) Залежно від значення, auto lambda [] () {return 0; } можна поставити в один рядок.\nМожливі значення:\n======================= int aaaa : 1; int b : 12; int ccc : 8; Приклади Стиль який симулює Linux Kernel style\nBasedOnStyle:LLVMIndentWidth:8UseTab:AlwaysBreakBeforeBraces:LinuxAllowShortIfStatementsOnASingleLine:falseIndentCaseLabels:falseРезультат (уявіть, що тут для відступу використовуються табуляція):\nvoid test() { switch (x) { case 0: case 1: do_something(); break; case 2: do_something_else(); break; default: break; } if (condition) do_something_completely_different(); if (x == y) { q(); } else if (x \u0026gt; y) { w(); } else { r(); } } Стиль, подібний до стилю форматування Visual Studio за замовчуванням:\nUseTab:NeverIndentWidth:4BreakBeforeBraces:AllmanAllowShortIfStatementsOnASingleLine:falseIndentCaseLabels:falseColumnLimit:0Результат:\nvoid test() { switch (suffix) { case 0: case 1: do_something(); break; case 2: do_something_else(); break; default: break; } if (condition) do_somthing_completely_different(); if (x == y) { q(); } else if (x \u0026gt; y) { w(); } else { r(); } } оригінал тут\n","description":"Параметри стилю Clang-Format","id":0,"section":"posts","tags":["C","Cpp","clang-format","C#","java","javascript","proto"],"title":"Clang-Format","uri":"http://sam4uk.site/en/posts/clang-format-style-options/"},{"content":"Вступ Коли я працював з Win системами я не любив командного\nінтерфейсу, що пропонувався у цій системі. Командний\nрядок був монохромним та гнітючим - чорний та білий.\nТак\u0026hellip; Командний рядок можна тюнінгувати, але в дуже\nобмеженому діапазоні: змінити колір фону та шрифту,\nзмінити розмір літер та їх гарнітуру і запрошення тай\nвсе.\nЯ завжди боявся запускати на виконаня команди з cmd.\nТа взагалі вінда спонукає використовувати графічний\nінтерфейс. Майже все у вінді можна робити без\nвикористання клавіатури.\nІнша справа у Linux. Після мого знайомства з цією\nсистемою страх перед CLI почав розвіюватися. Навіть\nне знаю чере що. Чи через те що термінал більш потужний\nінструмент, чи через те що він більш гнучкий, чи через\nте що командний рядок є невід'єсною частиною системи.\nВсе що можна виконти графічним маніпулятором (мишою)\nте можна продублювати у терміналі і навпаки. Windows\nне може похизуватися такими можливостями.\nСьогодні будемо тюнінгувати термінал.\nОстаннім часом в мене почав зникати страх та з'являтися\nлюбов до CLI. Це мабуть завдяки zsh :)\nВстановлення zch В моїй системі за замовчуванням встановлена оболонка\nтерміналу bash. Ми зараз це виправимо. Відкриємо\nтермінал\n1  sudo apt-get install zsh   Цією командою ми зупустили процес встановлення Z-shel.\n1  zsh   Запускаємо zsh. При першому запуску оболонка запропонує\nвам кілька питань для попереднього налаштування. Можна дати\nвідповіді на питання, або продовжити користуватись оболонкою\nналаштуваннями за замовчуванням.\nЗмінюємо оболонку за замовчуванням. За засовчуванням в Linux Mint встановлена оболонка bash.\nВиможете перевірити, який оболонка встановлена за замовчуванням\nвиконавши наступну команду\n1  echo $SHELL   У відповіді ви отримаєте шлях до оболонки терміналу, який\nвстановлено за замовчуванням.\nЩоб при настисканні Ctrl+Alt+T старував Z-shel потрібно\nвиконати команду:\n1  chsh -s /bin/zsh   Zsh: швидкий старт Повторити команду Ще до встановлення Oh My Zsh та плагінів можна оцінити\nможливості zsh\nСпробуйте виконати наступну команду:\n1  !!   Вона вставить в консоль попередню команду. Буде корисна, якщо забули\nвказати sudo для команди яка вимагає підвищених прівілей.\nНаприклад:\n1  you-sudo-command   Затребує права root:\nerror: you cannot perform this operation unless you are root. У відповідь на це повідомлення можна виконати команду:\n1  sudo !!   zsh замінить її на:\n1  sudo you-sudo-command   Повторити аргумент Від попередньої команди можна отримати тільки аргумент\n1  cd ~/MyFolder   Якщо каталогу ~/MyFolder не існує консоль виведе повідомлення, що не можливо\nперейти до такої директорії\ncd: no such file or directory: cd ~/MyFolder Тоді ми можемо її створити командою\n1  mkdir !*   Оболонка зробить заміну !* на аргумент попередньої команди:\n1  mkdir ~/MyFolder   Повторити команду за фрагментом Вставити в консоль останню команду, яка починається з вказаних символів.\nДля цього потрібно перед початком введень команди поставити знак оклику !:\n1  !part-of-command   Вставити в консоль попередню команду в якої відома лише частина символів по середині або в кінці:\n1  !?part-of-command?   Oh, my zsh Oh My Zsh — open source фреймворк, що підтримується\nспільнотою. Призначений для керування налаштуванням zsh та розширює його\nфункціонал за рахунок тем та плагінів.\nЛінк на репозиторiй.\nВстановлення через curl 1  sh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34;   Встановлення через wget 1  sh -c \u0026#34;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34;   Встановлення через вручну (загрузите скрипт, затем выполните его)\n1 2 3  curl -Lo install.sh https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh sh install.sh   Oh My Zsh встановлюється в папку ~/.oh-my-zsh. Якщо знадобиться видалити Oh My Zsh, не вмдаляйте теку вручну, а скористайтеся спеціальною командою:\n1  uninstall_oh_my_zsh   ","description":"Тюнінг термніналу Linux","id":1,"section":"posts","tags":["linux","bash","zsh","terminal"],"title":"Підкорюємо zsh","uri":"http://sam4uk.site/en/posts/oh_my_zsh/"},{"content":"Ibus ти звідки взявся??? Коли я встановив zoom в мене в системному лотку зник індикатор перемикача розкладки клавіатури та з'явилася іконка якої там раніше не було. Після завершення zoom мітингу, я видалив зайву іконку . Ibus прощавай\u0026hellip; Та при черговій потребі запустити zoom у системі, я його не виявив. Довелося знову завантажувати пакет.\nІ знову в ситемному лотку іконка якої там не повинно бути 😧\nПочинаю гуглити. І\u0026hellip; перша ж стаття\u0026hellip;\n З якого дива Zoom поширює .debs, які залежать від ibus .ibus - це пакет \u0026ldquo;intelligent input bus\u0026rdquo;, і, наскільки мені відомо, може використовуватися для введення смайлів у чаті чи щось таке ?? Але інакше насправді не є залежністю пакета Zoom. Я це багато перевірив \u0026hellip; клієнт чудово працює і без цього.\nКоли я встановив ibus разом із пакетом Zoom, я помітив, що ibus часто з’їдає ціле ядро ​​процесора. Я впевнений, що це помилка пакету чи послуги ibus, але у мене немає сил намагатися це виправити. Якщо це не важка залежність, Zoom не повинна спочатку залежати від неї.\nУ будь-якому випадку, ось як можна перепакувати Zoom .deb, щоб видалити залежність ibus:\n1 2 3 4 5 6 7 8 9 10 11 12 13  scratch=$(mktemp -d) # Витяг вмісту пакету dpkg -x zoom_amd64.deb $scratch # Витяг управління інформацією про пакет dpkg -e zoom_amd64.deb $scratch/DEBIAN # Видаліть залежність ibus sed -i -E \u0026#39;s/(ibus, |, ibus)//\u0026#39; $scratch/DEBIAN/control # Відновіть .deb dpkg -b $scratch patched_zoom_amd64.deb   Тепер ви можете встановити виправлене .deb за допомогою\n1  dpkg -i patched_zoom_amd64.deb   Виправлення вгору за течією полягало б у тому, щоб Zoom перемістив ibus \u0026ldquo;Залежність\u0026rdquo; до \u0026ldquo;Рекомендує\u0026rdquo;, але вони не бажають це робити вже більше року.\nАле почекайте, яка версія навіть мій пакет?\nДо речі, ви також могли помітити, що завантаження клієнта Zoom не відповідають стандартній схемі іменування пакетів Debian (тобто включаючи версію в ім'я файлу). Якщо ви не впевнені, яка версія завантаженого вами пакета zoom_amd64.deb, ви можете швидко витягти цю інформацію за допомогою dpkg-deb:\n1 2  dpkg-deb -I zoom_amd64.deb | grep Version # Version: 5.4.56259.1207    Скористався запропонованим алгоритмом видалення Ibus. Збережу аби знову не шукати.\nОригінал статті\n","description":"З якого дива  `Zoom` поширює .debs, які залежать від `ibus`","id":2,"section":"posts","tags":["zoom","ibus","linux","mint"],"title":"Ibus ти звідки взявся???","uri":"http://sam4uk.site/en/posts/zoom_ibus/"},{"content":"Крок перший. Підготовка інструментів. Крок другий. Репозиторій на Github. Настав час зареєструватися на GitHub, якщо ви цьго ще не зробили. Після створи репозиторій. Ім'я репозиторію має відповідати шаблону \u0026lt;OWNER\u0026gt;.github.io, де \u0026lt;OWNER\u0026gt;, тут та надалі ім'я твого облікового запису чи організації, якій належить репозиторій. Репозиторій має бути порожнім та публічним. Сняти галочку з Initialize this repository with a README, а перемикачі Add .gitgnore та Add a license виставити в положення None.\nТепер у вас є репозиторій. В ньому ви будуте зберігати статті та налаштування блогу.\nКрок третій. Кодова база. Hugo генерує сайт на основі шаблонів, налаштувань та вихідного тексту. Створи основу нового сайту командою:\nhugo new site \u0026lt;OWNER\u0026gt;.github.io Ініціалізуйте git-репозиторій та підєднайте до Github'у. Для персональних сайтів виду \u0026lt;OWNER\u0026gt;.github.io, GitHub Pages відображує сайт з вітки master. Відка буде порожня, доки відсутній згенерований сайт. Виконайте команди:\ncd \u0026lt;OWNER\u0026gt;.github.io git init git commit --allow-empty -m \u0026#34;Initializing master branch\u0026#34; git remote add origin git@github.com:\u0026lt;OWNER\u0026gt;/\u0026lt;OWNER\u0026gt;.github.io.git git push -u origin master Саму кодову базу та вихдний код з якого генеруватиметься сайт, будемо зберігати у гілці devel. Так ми розділимо код і результуючий артефакт. Зможемо працювати з ними незалежно. Виконай команди:\ngit checkout -b devel git add --all . git commit -m \u0026#39;Initial commit\u0026#39; git push -u origin devel Крок четвертий. Вибір та установка стилю. Обери довподоби своєму блогу стиль на сайті тем Hugo. Підєднай тему, що сподобалась як субмодуль git команда виду, для прикладу використовуєтьс тема dream-plus:\ngit submodule add git@github.com:UtkarshVerma/hugo-dream-plus.git themes/dream-plus .github.io/themes` или склонировать репозиторий с темой в ту же директорию. Я предпочитаю использовать субмодули. Темы можно легко обновлять из источника. Тему можно дополнить модулями в\u0026nbsp;директории `.github.io/layouts`. Почитать о выборе между использование `git clone` или `git submodule` для тем Hugo можешь в [обсуждении](https://discourse.gohugo.io/t/adding-a-theme-as-a-submodule-or-clone/8789). -- Крок п'ятий. налаштування Hugo. Настав час налаштувати Hugo. Відредагуйте файл config.toml до наступного змісту, забудь відредагувати параметри під свій сайт:\n# Адреса вашого сайту baseURL = \u0026#34;https://\u0026lt;OWNER\u0026gt;.github.io/\u0026#34; # Назва вашого сайту title = \u0026#34;Супер бложик\u0026#34; # Тема що використовується theme = \u0026#34;dream-plus\u0026#34; # Сюди Hugo збереже згенерований сайт publishdir = \u0026#34;./public/\u0026#34; Крок шостий. Директорія для публикації. Вихідний коди та сам сайт зберігаються в різних відках. Перемикатися між ними та переносити зміни - незручно. Тому підєднуємо вітку master в робосий каталог public командами:\ngit worktree add -B master public origin/master echo \u0026#34;public\u0026#34; \u0026gt;\u0026gt; .gitignore git add .gitignore git commit -m \u0026#39;Add .gitignore\u0026#39; Таку операцію доведеться повторювати при створенні робочого каталогу, на кожному робочому комп'ютері.\nГенерацію сайту можна передати CI-системі та забути про ручні зміни.\nКрок сьомий. Публікація головної сторінки. Пора вийти в світ з пісочниці. Для початку згенеруй сайт командою:\nhugo А тепер вивантажи його на GitHub командами:\npushd public git add . git commit -m \u0026#39;Add index page\u0026#39; git push popd І ось тут ваш сайт має стати доступним. Але черз невідомі мені причини GitHub Pages стабільно підхоплює новий сайт тільки після другого-третього комміту. Не розстроюйтесь, скоро ми його зробимо.\nКрок восьмий. Перший пост. Створи перший пост командою:\nhugo new posts/first-post.md Hugo підготує шаблон нової сторінки. Відкрий файл posts/first-post.md та відредагуй його. На початку ви помітите блок з метаданими посту, після яких починається сам текст статті у форматі markdown, хоча є можливість використати інший формат другой формат.\n--- # Назва статті title: \u0026#34;Блог на Github Pages для чайників\u0026#34; # Дата статті date: 2019-12-25T21:32:05+03:00 # Теги статті tags: [\u0026#34;github pages\u0026#34;, \u0026#34;blog\u0026#34;, \u0026#34;hugo\u0026#34;] # Ознака чернетки, допоки в занченні \u0026#34;true\u0026#34;, Hugo не буде відображати цю статтю draft: false # Увімкнення коментарів comments: true # Стислий опис статті summary: \u0026#34;Покрокова інструкція по створенню безкоштовного блогу або сайту на Github Pages з використанням Hugo для початківців.\u0026#34; --- Крок десятий. .github.io/content/ url = \"/blog\" ``` Для добавления нового пункта, добавь еще один блок `[[menu.main]]` целиком. -- Крок десятий. Profit! Ми пройшли всю необхідну підготовчу роботу. Збережи зміни кодової бази:\ngit add . git commit -m \u0026#39;Add index page, first post, navigation menu and config\u0026#39; git push Згенеруй сайт та вивантаж зміни на Github.\nhugo pushd public git add . git commit -m \u0026#39;Publish first post\u0026#39; git push popd Зачекай кілька хвилин, доки GitHub Pages опрацює зміни. Зайти на персональний сайт https://\u0026lt;OWNER\u0026gt;.github.io/ та насолоджуйся результатом!\nРежим Pro або що далі? А ділі потрібно автоматизувати генерацію сайту з допомогою CI, налаштувати красивий персональний домен, під'єднати коментарі та налаштувати систему аналітики GoogleAnalytics. Про це іншим разом\nStay tuned!\nОригінал статті\n","description":"Покрокова інструкція по створенню безкоштовного блогу або сайту на Github Pages з використанням Hugo для початківців.","id":3,"section":"posts","tags":["hugo","github pages","blog","personal brand"],"title":"Десять кроків до особистого блогу на Github Pages.","uri":"http://sam4uk.site/en/posts/10-steps-to-bloging/"},{"content":"Підсвідка синтаксису коду Diff 1 2 3 4 5 6 7 8 9 10  *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line   *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line Makefile CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I. 1 2 3 4 5  CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I.   JSON 1 2 3  {\u0026#34;employees\u0026#34;:[ {\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;}, ]}   Markdown 1 2 3  **bold** *italics* [link](www.example.com)   JavaScript 1  document.write(\u0026#39;Hello, world!\u0026#39;);   CSS 1 2 3  body { background-color: red; }   Objective C 1 2 3 4 5 6  #import \u0026lt;stdio.h\u0026gt;  int main (void) { printf (\u0026#34;Hello world!\\n\u0026#34;); }   Python 1  print \u0026#34;Hello, world!\u0026#34;   XML 1 2 3 4 5  \u0026lt;employees\u0026gt; \u0026lt;employee\u0026gt; \u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;Doe\u0026lt;/lastName\u0026gt; \u0026lt;/employee\u0026gt; \u0026lt;/employees\u0026gt;   Perl 1  print \u0026#34;Hello, World!\\n\u0026#34;;   Bash 1  echo \u0026#34;Hello World\u0026#34;   PHP 1  \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt;   CoffeeScript 1  console.log(“Hello world!”);   C# 1 2 3 4 5 6 7 8  using System; class Program { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello, world!\u0026#34;); } }   C++ 1 2 3 4 5 6 7  #include \u0026lt;iostream.h\u0026gt; main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; }   SQL 1 2  SELECT column_name,column_name FROM table_name;   Go 1 2 3 4 5  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, 世界\u0026#34;) }   Ruby 1  puts \u0026#34;Hello, world!\u0026#34;   Java 1 2 3 4 5 6 7 8 9 10 11 12  import javax.swing.JFrame; //Importing class JFrame import javax.swing.JLabel; //Importing class JLabel public class HelloWorld { public static void main(String[] args) { JFrame frame = new JFrame(); //Creating frame  frame.setTitle(\u0026#34;Hi!\u0026#34;); //Setting title frame  frame.add(new JLabel(\u0026#34;Hello, world!\u0026#34;));//Adding text to frame  frame.pack(); //Setting size to smallest  frame.setLocationRelativeTo(null); //Centering frame  frame.setVisible(true); //Showing frame  } }   Latex Equation 1  \\frac{d}{dx}\\left( \\int_{0}^{x} f(u)\\,du\\right)=f(x).   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import {x, y} as p from \u0026#39;point\u0026#39;; const ANSWER = 42; class Car extends Vehicle { constructor(speed, cost) { super(speed); var c = Symbol(\u0026#39;cost\u0026#39;); this[c] = cost; this.intro = `This is a car runs at ${speed}.`; } } for (let num of [1, 2, 3]) { console.log(num + 0b111110111); } function $initHighlight(block, flags) { try { if (block.className.search(/\\bno\\-highlight\\b/) != -1) return processBlock(block.function, true, 0x0F) + \u0026#39; class=\u0026#34;\u0026#34;\u0026#39;; } catch (e) { /* handle exception */ var e4x = \u0026lt;div\u0026gt;Example \u0026lt;p\u0026gt;1234\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;; } for (var i = 0 / 2; i \u0026lt; classes.length; i++) { // \u0026#34;0 / 2\u0026#34; should not be parsed as regexp  if (checkCondition(classes[i]) === undefined) return /\\d+[\\s/]/g; } console.log(Array.every(classes, Boolean)); } export $initHighlight;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello world\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#39;http://fonts.googleapis.com/css?family=Roboto:400,400italic,700,700italic\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;index.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;vendor/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;examples.bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  /********************************************************* * General */ pre[class*=\u0026#34;language-\u0026#34;], code { color: #5c6e74; font-size: 13px; text-shadow: none; font-family: Consolas, Monaco, \u0026#39;Andale Mono\u0026#39;, \u0026#39;Ubuntu Mono\u0026#39;, monospace; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; line-height: 1.5; tab-size: 4; hyphens: none; } pre[class*=\u0026#34;language-\u0026#34;]::selection, code::selection { text-shadow: none; background: #b3d4fc; } @media print { pre[class*=\u0026#34;language-\u0026#34;], code { text-shadow: none; } } pre[class*=\u0026#34;language-\u0026#34;] { padding: 1em; margin: .5em 0; overflow: auto; background: #f8f5ec; } :not(pre) \u0026gt; code { padding: .1em .3em; border-radius: .3em; color: #db4c69; background: #f9f2f4; }   ","description":"Демонстрація підсвідки синтаксису","id":4,"section":"posts","tags":["hugo"],"title":"Підсвідка синтаксису","uri":"http://sam4uk.site/en/posts/syntax-highlight/"},{"content":"ХТО я такий? Я просто ще один\u0026hellip; Один з тих хто любить\nХто я такий? Для вас я ще один чувак з інтернету, який любить писати, програмувати та робити різні речі. Я не ставлю перед собою мету комусь і щось донести через мережу. Кому\nпотрібно сам все знайде. Інтернет відкриває широкі можливості не тільки, щоб гаяти час у соціальних мережах, а й самоудосконалюватись.\nНе так давно я більш інтенсивно почав цікавитись програмуванням та операційними системами Linux, і мікроконтролерами. Все що люблю я буду розміщувати тут. Все що хоч раз мені допомогло буду тут записувати на цих сторнінках.\nЦе мої нотатки на полях.\nЦе все, що я можу зараз придумати. Сподіваюся, я додам до цього ще щось пізніше. 😅\nВам цікаво про мене? Використовуйте лінки нижче, щоб відвідати мої профілі.\nPatreon . Я буду дуже вдячний. -- ","description":"Про мене","id":5,"section":"","tags":null,"title":"Про мене","uri":"http://sam4uk.site/en/about/"}]